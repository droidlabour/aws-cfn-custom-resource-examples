{
    "AWSTemplateFormatVersion": "2010-09-09",

    "Description": "RDS (MySQL) orchestration and auto import sql from S3",

    "Parameters": {
        "DBName": {
            "Description": "RDS Database Name",
            "Type": "String"
        },
        "InstanceType": {
            "AllowedValues": [
                "db.m1.small",
                "db.m1.medium",
                "db.m1.large",
                "db.m1.xlarge",
                "db.m4.large",
                "db.m4.xlarge",
                "db.m4.2xlarge",
                "db.m4.4xlarge",
                "db.m4.10xlarge",
                "db.r3.large",
                "db.r3.xlarge",
                "db.r3.2xlarge",
                "db.r3.4xlarge",
                "db.r3.8xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type.",
            "Description": "EC2 instance type",
            "Type": "String"
        },
        "RDSMasterPassword": {
            "Description": "RDS Master Password",
            "NoEcho": "true",
            "Type": "String"
        },
        "RDSMasterUserName": {
            "Description": "RDS Master User Name",
            "Type": "String"
        },
        "SQLS3Bucket": {
            "Description": "S3 bucket name where sql files will be uploaded",
            "Type": "String"
        }
    },

    "Resources": {
        "BucketPermission": {
            "DependsOn": "Lambda",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "Lambda",
                        "Arn"
                    ]
                },
                "Principal": "s3.amazonaws.com",
                "SourceAccount": {
                    "Ref": "AWS::AccountId"
                },
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:aws:s3:::",
                            {
                                "Ref": "SQLS3Bucket"
                            }
                        ]
                    ]
                }
            },
            "Type": "AWS::Lambda::Permission"
        },
        "S3Bucket": {
            "DependsOn": "BucketPermission",
            "Properties": {
                "BucketName": {
                    "Ref": "SQLS3Bucket"
                },
                "NotificationConfiguration": {
                    "LambdaConfigurations": [
                        {
                            "Event": "s3:ObjectCreated:*",
                            "Filter": {
                                "S3Key": {
                                    "Rules": [
                                        {
                                            "Name": "suffix",
                                            "Value": "sql"
                                        }
                                    ]
                                }
                            },
                            "Function": {
                                "Fn::GetAtt": [
                                    "Lambda",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                }
            },
            "Type": "AWS::S3::Bucket"
        },
        "DB": {
            "DeletionPolicy": "Snapshot",
            "DependsOn": "VPCGatewayAttachment",
            "Properties": {
                "AllocatedStorage": "5",
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "DBInstanceClass": {
                    "Ref": "InstanceType"
                },
                "DBName": {
                    "Ref": "DBName"
                },
				"PubliclyAccessible": true,
                "VPCSecurityGroups": [
					{
						"Fn::GetAtt": [
							"InstanceSecurityGroup",
							"GroupId"
						]
					}
				],
                "DBSubnetGroupName": {
                    "Ref": "DBSubnetGroup"
                },
                "Engine": "MySQL",
                "MasterUserPassword": {
                    "Ref": "RDSMasterPassword"
                },
                "MasterUsername": {
                    "Ref": "RDSMasterUserName"
                },
                "MultiAZ": false
            },
            "Type": "AWS::RDS::DBInstance"
        },
        "DBSubnetGroup": {
            "Properties": {
                "DBSubnetGroupDescription": "DB subnet group",
                "SubnetIds": [
                    {
                        "Ref": "SubnetA"
                    },
                    {
                        "Ref": "SubnetB"
                    }
                ]
            },
            "Type": "AWS::RDS::DBSubnetGroup"
        },
        "VPC": {
            "Properties": {
                "CidrBlock": "172.31.0.0/16",
                "EnableDnsHostnames": true,
                "EnableDnsSupport": true,
                "InstanceTenancy": "default"
            },
            "Type": "AWS::EC2::VPC"
        },
        "SubnetA": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "172.31.0.0/20",
                "MapPublicIpOnLaunch": true,
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "SubnetB": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "172.31.16.0/20",
                "MapPublicIpOnLaunch": false,
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "PublicRouteTable": {
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "PrivateRouteTable": {
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "SubnetARouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "SubnetA"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "SubnetBRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                },
                "SubnetId": {
                    "Ref": "SubnetB"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "EIP": {
            "Properties": {
                "Domain": "vpc"
            },
            "Type": "AWS::EC2::EIP"
        },
		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway"
		},
		"InternetRoute": {
			"DependsOn": "InternetGateway",
			"Properties": {
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "InternetGateway"
				},
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				}
			},
			"Type": "AWS::EC2::Route"
		},
        "NatGateway": {
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "EIP",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "SubnetA"
                }
            },
            "Type": "AWS::EC2::NatGateway"
        },
        "NATRoute": {
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NatGateway"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
		"VPCGatewayAttachment": {
            "Properties": {
                "InternetGatewayId": {
					"Ref": "InternetGateway"
                },
                "VpcId": {
					"Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::VPCGatewayAttachment"
		},
        "IamRoleLambdaExecution": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "arn:aws:logs:*:*:*"
                                },
                                {
                                    "Action": [
                                        "s3:GetObject",
                                        "s3:GetObjectAcl"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:CreateNetworkInterface",
                                        "ec2:DeleteNetworkInterface"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": {
                            "Fn::Join": [
                                "-",
                                [
                                    "Lambda",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "InstanceSecurityGroup": {
            "Properties": {
                "GroupDescription": "Enable lambda to access RDS",
				"SecurityGroupIngress": [
					{
						"CidrIp": "172.31.16.0/20",
						"IpProtocol": "tcp",
						"FromPort": 3306,
						"ToPort": 3306
					}
				],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "Lambda": {
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
								"import os",
								"import urllib",
								"",
								"import boto3",
								"",
								"",
								"def handler(event, context):",
								"    print(event)",
								"",
								"    testfile = urllib.URLopener()",
								"    testfile.retrieve('https://gist.githubusercontent.com/droidlabour/84f81002bcbd188e824ab92c67d3c395/raw/ee28df4468f9806c5ecd284899ac71b9ec73ca0f/mysql', '/tmp/mysql')",
								"    os.environ['PATH'] += os.pathsep + '/tmp'",
								"    os.system('chmod 777 /tmp/mysql')",
								"",
								"    bucket = event['Records'][0]['s3']['bucket']['name']",
								"    key = urllib.unquote_plus(event['Records'][0]['s3']['object']['key'].encode('utf8'))",
								"    s3 = boto3.resource('s3')",
								"    s3.meta.client.download_file(bucket, key, '/tmp/sql.sql')",
								"",
								"    os.system('mysql -u' + os.getenv('RDSMasterUserName') + ' -p' + os.getenv('RDSMasterPassword') + ' -h' + os.getenv('RDSHostname') + ' -e \"show databases\"')",
								"    os.system('mysql -u' + os.getenv('RDSMasterUserName') + ' -p' + os.getenv('RDSMasterPassword') + ' -h' + os.getenv('RDSHostname') + ' ' + os.getenv('RDSDBName') + ' < /tmp/sql.sql')"
                            ]
                        ]
                    }
                },
                "Environment": {
                    "Variables": {
                        "RDSDBName": {
                            "Ref": "DBName"
                        },
                        "RDSHostname": {
                            "Fn::GetAtt": [
                                "DB",
                                "Endpoint.Address"
                            ]
                        },
                        "RDSMasterPassword": {
                            "Ref": "RDSMasterPassword"
                        },
                        "RDSMasterUserName": {
                            "Ref": "RDSMasterUserName"
                        }
                    }
                },
                "FunctionName": {
                    "Fn::Join": [
                        "-",
                        [
                            "mysql_rds_import",
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                },
                "Handler": "index.handler",
                "MemorySize": 256,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "python2.7",
                "Timeout": 20,
                "VpcConfig": {
                    "SecurityGroupIds": [
                        {
                            "Ref": "InstanceSecurityGroup"
                        }
                    ],
                    "SubnetIds": [
                        {
                            "Ref": "SubnetB"
                        }
                    ]
                }
            },
            "Type": "AWS::Lambda::Function"
        }
    }
}
